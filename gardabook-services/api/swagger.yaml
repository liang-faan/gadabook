---
swagger: "2.0"
info:
  description: "This is API design for GardaBook System"
  version: "1.0.0"
  title: "GardaBook System API"
  termsOfService: ""
  contact:
    email: "e0384837@u.nus.edu"
  license:
    name: "Apache 2.0"
    url: "http://www.gardabook.com"
host: "www.gardabook.com"
basePath: "/v1"
tags:
- name: "catalogue"
  description: "Different types of facilities inventories storage and management"
  externalDocs:
    description: "More"
    url: "https://www.gardabook.com/catalogue/guide"
- name: "user"
  description: "Operations about user register, login, profile management"
  externalDocs:
    description: "More"
    url: "https://www.gardabook.com/user/guide"
- name: "booking"
  description: "Access to book facilities in system"
  externalDocs:
    description: "More"
    url: "https://www.gardabook.com/booking/guide"
- name: "enrollment"
  description: "User use to enroll facility into system "
  externalDocs:
    description: "More"
    url: "https://www.gardabook.com/enrollment/guide"
schemes:
- "https"
- "http"
paths:
  /catalogue:
    get:
      tags:
      - "catalogue"
      summary: "Finds catalogue by tags or providers"
      description: "Multiple tag values can be provided with comma separated strings"
      operationId: "findByTags"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "x-int-role"
        in: "header"
        required: true
        type: "string"
        default: "retrieve"
      - name: "tags"
        in: "query"
        description: "Status values that need to be considered for filter"
        required: true
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Catalogue"
        400:
          description: "Invalid status value"
      security:
      - Bearer: []
      x-security-scopes:
      - "read:catalogue"
      x-swagger-router-controller: "Catalogue"
    post:
      tags:
      - "catalogue"
      summary: "Add a new catalogue to GardaBook"
      description: ""
      operationId: "addCatalogue"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "x-int-role"
        in: "header"
        required: true
        type: "string"
        default: "create"
      - in: "body"
        name: "body"
        description: "Catalogue object that needs to be added to the system"
        required: true
        schema:
          $ref: "#/definitions/NewCatalogue"
      responses:
        405:
          description: "Invalid input"
      security:
      - Bearer: []
      x-security-scopes:
      - "write:catalogue"
      - "read:catalogue"
      x-swagger-router-controller: "Catalogue"
    put:
      tags:
      - "catalogue"
      summary: "Update an existing catalogue item"
      description: ""
      operationId: "updateCatalgoue"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "x-int-role"
        in: "header"
        required: true
        type: "string"
        default: "update"
      - in: "body"
        name: "body"
        description: "Catalogue object that needs to be update into the system"
        required: true
        schema:
          $ref: "#/definitions/Catalogue"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Catalogue not found"
        405:
          description: "Validation exception"
      security:
      - Bearer: []
      x-security-scopes:
      - "write:catalogue"
      - "read:catalogue"
      x-swagger-router-controller: "Catalogue"
  /catalogue/{catalogueId}:
    get:
      tags:
      - "catalogue"
      summary: "Find Catalogue by ID"
      description: "Returns a single Catalogue"
      operationId: "getCatalogueById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "x-int-role"
        in: "header"
        required: true
        type: "string"
        default: "retrieve"
      - name: "catalogueId"
        in: "path"
        description: "ID of catalogue to return"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Catalogue"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Catalogue not found"
      security:
      - Bearer: []
      x-security-scopes:
      - "read:catalogue"
      x-swagger-router-controller: "Catalogue"
    delete:
      tags:
      - "catalogue"
      summary: "Deletes a catalogue"
      description: ""
      operationId: "deleteCatalogue"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "x-int-role"
        in: "header"
        required: true
        type: "string"
        default: "delete"
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "catalogueId"
        in: "path"
        description: "Catalogue id to delete"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Catalogue not found"
      security:
      - Bearer: []
      x-security-scopes:
      - "read:catalogue"
      - "write:catalogue"
      x-swagger-router-controller: "Catalogue"
  /catalogue/availability/{catalogueId}:
    get:
      tags:
      - "catalogue"
      summary: "Find availability by catalogue ID"
      description: "Returns list of availability of catalogue"
      operationId: "getAvailabilityByCatalogueId"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "x-int-role"
        in: "header"
        required: true
        type: "string"
        default: "retrieve"
      - name: "catalogueId"
        in: "path"
        description: "ID of catalogue"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Availability"
        400:
          description: "Invalid ID supplied"
        404:
          description: "No availability found"
      security:
      - Bearer: []
      x-security-scopes:
      - "write:catalogue"
      x-swagger-router-controller: "Catalogue"
  /booking:
    get:
      tags:
      - "booking"
      summary: "Find booking history by user id"
      description: "Returns booking list of user's"
      operationId: "getUserBooking"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "x-int-role"
        in: "header"
        required: true
        type: "string"
        default: "retrieve"
      - name: "userId"
        in: "query"
        description: "ID of user"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Booking"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Booking not found"
      security:
      - Bearer: []
      x-security-scopes:
      - "read:booking"
      x-swagger-router-controller: "Booking"
    post:
      tags:
      - "booking"
      summary: "Place an booking"
      description: ""
      operationId: "createUserBooking"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "x-int-role"
        in: "header"
        required: true
        type: "string"
        default: "create"
      - in: "body"
        name: "body"
        description: "book for the facility"
        required: true
        schema:
          $ref: "#/definitions/NewBooking"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/NewBooking"
        400:
          description: "Invalid Order"
      security:
      - Bearer: []
      x-security-scopes:
      - "write:booking"
      x-swagger-router-controller: "Booking"
  /booking/{bookingId}:
    get:
      tags:
      - "booking"
      summary: "Find booking by ID"
      description: "For valid response try integer IDs with value >= 1 and <= 10.\
        \         Other values will generated exceptions"
      operationId: "getBooking"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "x-int-role"
        in: "header"
        required: true
        type: "string"
        default: "retrieve"
      - name: "bookingId"
        in: "path"
        description: "ID of booking that needs to be fetched"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Booking"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Order not found"
      security:
      - Bearer: []
      x-security-scopes:
      - "read:booking"
      x-swagger-router-controller: "Booking"
    delete:
      tags:
      - "booking"
      summary: "Delete purchase order by ID"
      description: "For valid response try integer IDs with positive integer value.\
        \         Negative or non-integer values will generate API errors"
      operationId: "deleteBooking"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "x-int-role"
        in: "header"
        required: true
        type: "string"
        default: "delete"
      - name: "bookingId"
        in: "path"
        description: "ID of the order that needs to be deleted"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Order not found"
      security:
      - Bearer: []
      x-security-scopes:
      - "write:booking"
      x-swagger-router-controller: "Booking"
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "x-int-role"
        in: "header"
        required: true
        type: "string"
        default: "create"
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
      security:
      - Bearer: []
      x-security-scopes:
      - "write:user"
      x-swagger-router-controller: "User"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "x-int-role"
        in: "header"
        required: true
        type: "string"
        default: "update"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        400:
          description: "Invalid user supplied"
        404:
          description: "User not found"
      security:
      - Bearer: []
      x-security-scopes:
      - "write:user"
      x-swagger-router-controller: "User"
  /user/login:
    put:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "userLogin"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "x-int-role"
        in: "header"
        required: true
        type: "string"
        default: "login"
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
            X-Cookies:
              type: "string"
              description: "cookies to contains session id"
          schema:
            type: "string"
        400:
          description: "Invalid username/password supplied"
      x-swagger-router-controller: "User"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "userLogout"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "x-int-role"
        in: "header"
        required: true
        type: "string"
        default: "logout"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "User"
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "x-int-role"
        in: "header"
        required: true
        type: "string"
        default: "retrieve"
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
      security:
      - Bearer: []
      x-security-scopes:
      - "read:user"
      x-swagger-router-controller: "User"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "x-int-role"
        in: "header"
        required: true
        type: "string"
        default: "delete"
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
      security:
      - Bearer: []
      x-security-scopes:
      - "write:user"
      - "read:user"
      x-swagger-router-controller: "User"
  /enrollment:
    post:
      tags:
      - "enrollment"
      summary: "Create an enrollemnt"
      description: "This can only be done by the enrolled user."
      operationId: "createEnrollment"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "x-int-role"
        in: "header"
        required: true
        type: "string"
        default: "create"
      - in: "body"
        name: "body"
        description: "Created enrollement object"
        required: true
        schema:
          $ref: "#/definitions/Enrollment"
      responses:
        default:
          description: "successful operation"
      security:
      - Bearer: []
      x-security-scopes:
      - "write:enrollment"
      x-swagger-router-controller: "Enrollment"
  /enrollment/{providerId}:
    get:
      tags:
      - "enrollment"
      summary: "get enrollemnt by providerId"
      description: "This can only be done by the enrolled user."
      operationId: "getEnrollmentByProviderId"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "x-int-role"
        in: "header"
        required: true
        type: "string"
        default: "retrieve"
      - name: "providerId"
        in: "path"
        description: "the provider id of enrollment"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Enrollment"
        404:
          description: "No enrollment found on current provider"
      security:
      - Bearer: []
      x-security-scopes:
      - "write:enrollment"
      - "read:enrollment"
      x-swagger-router-controller: "Enrollment"
securityDefinitions:
  Bearer:
    description: "Jwt token authentication from AWS Cognito"
    type: "apiKey"
    name: "Authorization"
    in: "header"
definitions:
  NewBooking:
    type: "object"
    properties:
      userId:
        type: "string"
      catalogueId:
        type: "string"
      date:
        type: "string"
        format: "date-time"
      slot:
        type: "integer"
        format: "int64"
      startTime:
        type: "string"
        format: "date-time"
      endTime:
        type: "string"
        format: "date-time"
      amount:
        type: "number"
    xml:
      name: "NewBooking"
    example:
      userId: "User_1111"
      catalogueId: "Catalogue_111"
      date: "2000-01-23T04:56:07.000+00:00"
      slot: 1
      startTime: "2000-01-23T04:56:07.000+00:00"
      endTime: "2000-01-23T04:56:07.000+00:00"
      amount: 111
  Booking:
    type: "object"
    properties:
      bookingId:
        type: "string"
      user:
        $ref: "#/definitions/User"
      catalogue:
        $ref: "#/definitions/Catalogue"
      availability:
        $ref: "#/definitions/Availability"
      amount:
        type: "number"
        format: "currency"
      createDate:
        type: "string"
        format: "date-time"
      bookingDate:
        type: "string"
        format: "date-time"
      submitDate:
        type: "string"
        format: "date-time"
      paymentDate:
        type: "string"
        format: "date-time"
      status:
        type: "string"
        description: "Order Status"
        enum:
        - "New"
        - "Booked"
        - "Rejected"
      complete:
        type: "boolean"
        default: false
    xml:
      name: "Booking"
    example:
      amount: 6.02745618307040320615897144307382404804229736328125
      submitDate: "2000-01-23T04:56:07.000+00:00"
      bookingDate: "2000-01-23T04:56:07.000+00:00"
      availability:
        date: "2000-01-23"
        availablityId: 0
        catalogue:
          venue: "venue"
          catalogueId: 0
          address: "address"
          city: "city"
          rateUnit: "Minute"
          remark: "remark"
          provider:
            firstName: "firstName"
            lastName: "lastName"
            userStatus: 5
            phone: "phone"
            userId: "1"
            email: "email"
            username: "username"
          rate: 5.63737665663332876420099637471139430999755859375
          terms: "terms"
          name: "NUS ISS Meeting Room#5"
          currency: "SGD"
          tag:
          - tagId: 6
            descritpion: "descritpion"
            status: "Active"
          - tagId: 6
            descritpion: "descritpion"
            status: "Active"
          status: "Open"
      paymentDate: "2000-01-23T04:56:07.000+00:00"
      complete: false
      user:
        firstName: "firstName"
        lastName: "lastName"
        userStatus: 5
        phone: "phone"
        userId: "1"
        email: "email"
        username: "username"
      bookingId: 0
      catalogue:
        venue: "venue"
        catalogueId: 0
        address: "address"
        city: "city"
        rateUnit: "Minute"
        remark: "remark"
        provider:
          firstName: "firstName"
          lastName: "lastName"
          userStatus: 5
          phone: "phone"
          userId: "1"
          email: "email"
          username: "username"
        rate: 5.63737665663332876420099637471139430999755859375
        terms: "terms"
        name: "NUS ISS Meeting Room#5"
        currency: "SGD"
        tag:
        - tagId: 6
          descritpion: "descritpion"
          status: "Active"
        - tagId: 6
          descritpion: "descritpion"
          status: "Active"
        status: "Open"
      createDate: "2000-01-23T04:56:07.000+00:00"
      status: "New"
  Availability:
    type: "object"
    properties:
      availablityId:
        type: "string"
      catalogue:
        $ref: "#/definitions/Catalogue"
      date:
        type: "string"
        format: "date"
    xml:
      name: "Avalability"
    example:
      date: "2000-01-23"
      availablityId: 0
      catalogue:
        venue: "venue"
        catalogueId: 0
        address: "address"
        city: "city"
        rateUnit: "Minute"
        remark: "remark"
        provider:
          firstName: "firstName"
          lastName: "lastName"
          userStatus: 5
          phone: "phone"
          userId: "1"
          email: "email"
          username: "username"
        rate: 5.63737665663332876420099637471139430999755859375
        terms: "terms"
        name: "NUS ISS Meeting Room#5"
        currency: "SGD"
        tag:
        - tagId: 6
          descritpion: "descritpion"
          status: "Active"
        - tagId: 6
          descritpion: "descritpion"
          status: "Active"
        status: "Open"
  User:
    type: "object"
    properties:
      userId:
        type: "string"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"
    example:
      firstName: "firstName"
      lastName: "lastName"
      userStatus: 5
      phone: "phone"
      userId: "1"
      email: "email"
      username: "username"
  Tag:
    type: "object"
    properties:
      tagId:
        type: "string"
      descritpion:
        type: "string"
      status:
        type: "string"
        enum:
        - "Active"
        - "Deleted"
        - "Obsoloted"
    xml:
      name: "Tag"
    example:
      tagId: 6
      descritpion: "descritpion"
      status: "Active"
  NewCatalogue:
    type: "object"
    required:
    - "name"
    - "currency"
    - "rate"
    - "unit"
    - "tagId"
    - "availabilityId"
    properties:
      availabilityId:
        type: "string"
      tagId:
        type: "string"
      name:
        type: "string"
        example: "NUS ISS Meeting Room#5"
      currency:
        type: "string"
        description: "catalogue currency"
        enum:
        - "SGD"
        - "USD"
        - "MYR"
      rate:
        type: "number"
        format: "currency"
      unit:
        type: "string"
        description: "the unit of rate"
        enum:
        - "Minute"
        - "Hour"
        - "Day"
        - "Week"
        - "Month"
        - "Year"
      remark:
        type: "string"
      tnc:
        type: "string"
      venue:
        type: "string"
      city:
        type: "string"
      address:
        type: "string"
    xml:
      name: "Catalogue"
    example:
      venue: "venue"
      availabilityId: "AvailabilityId_111"
      tagId: "Tag_111"
      address: "address"
      city: "city"
      unit: "Minute"
      remark: "remark"
      rate: 5.6
      tnc: "terms"
      name: "NUS ISS Meeting Room#5"
      currency: "SGD"
  Catalogue:
    type: "object"
    required:
    - "name"
    - "rate"
    - "rateUnit"
    - "venue"
    properties:
      catalogueId:
        type: "string"
      tag:
        type: "array"
        xml:
          name: "tag"
          wrapped: true
        items:
          $ref: "#/definitions/Tag"
      provider:
        $ref: "#/definitions/User"
      name:
        type: "string"
        example: "NUS ISS Meeting Room#5"
      currency:
        type: "string"
        description: "catalogue currency"
        enum:
        - "SGD"
        - "USD"
        - "MYR"
      rate:
        type: "number"
        format: "currency"
      rateUnit:
        type: "string"
        description: "the unit of rate"
        enum:
        - "Minute"
        - "Hour"
        - "Day"
        - "Week"
        - "Month"
        - "Year"
      remark:
        type: "string"
      terms:
        type: "string"
      venue:
        type: "string"
      city:
        type: "string"
      address:
        type: "string"
      status:
        type: "string"
        description: "Catalogue status in the system"
        enum:
        - "Open"
        - "Closed"
    xml:
      name: "Catalogue"
    example:
      venue: "venue"
      catalogueId: 0
      address: "address"
      city: "city"
      rateUnit: "Minute"
      remark: "remark"
      provider:
        firstName: "firstName"
        lastName: "lastName"
        userStatus: 5
        phone: "phone"
        userId: "1"
        email: "email"
        username: "username"
      rate: 5.63737665663332876420099637471139430999755859375
      terms: "terms"
      name: "NUS ISS Meeting Room#5"
      currency: "SGD"
      tag:
      - tagId: 6
        descritpion: "descritpion"
        status: "Active"
      - tagId: 6
        descritpion: "descritpion"
        status: "Active"
      status: "Open"
  Enrollment:
    type: "object"
    properties:
      enrollmentId:
        type: "string"
      provider:
        $ref: "#/definitions/User"
      catalogue:
        $ref: "#/definitions/Catalogue"
      date:
        type: "string"
        format: "date"
      startTime:
        type: "string"
        format: "date-time"
      endTime:
        type: "string"
        format: "date-time"
      status:
        type: "string"
        enum:
        - "Booked"
        - "Reserved"
        - "Available"
    xml:
      name: "Enrollment"
    example:
      date: "2000-01-23"
      enrollmentId: 0
      provider:
        firstName: "firstName"
        lastName: "lastName"
        userStatus: 5
        phone: "phone"
        userId: "1"
        email: "email"
        username: "username"
      startTime: "2000-01-23T04:56:07.000+00:00"
      endTime: "2000-01-23T04:56:07.000+00:00"
      catalogue:
        venue: "venue"
        catalogueId: 0
        address: "address"
        city: "city"
        rateUnit: "Minute"
        remark: "remark"
        provider:
          firstName: "firstName"
          lastName: "lastName"
          userStatus: 5
          phone: "phone"
          userId: "1"
          email: "email"
          username: "username"
        rate: 5.63737665663332876420099637471139430999755859375
        terms: "terms"
        name: "NUS ISS Meeting Room#5"
        currency: "SGD"
        tag:
        - tagId: 6
          descritpion: "descritpion"
          status: "Active"
        - tagId: 6
          descritpion: "descritpion"
          status: "Active"
        status: "Open"
      status: "Booked"
externalDocs:
  description: "Find out more about Gardabook"
  url: "http://www.gardabook.com"
