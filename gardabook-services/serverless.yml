
service: gadabook-services

provider:
  name: aws
  runtime: nodejs10.x
  stage: dev
  region: ap-southeast-1

functions:
  # publicEndpoint:
  #   handler: handler.publicEndpoint
  #   events:
  #     - http:
  #         path: api/public
  #         method: get
  #         integration: lambda
  #         cors: true
  auth:
    handler: security/auth.authorize
  # privateEndpoint:
  #   handler: handler.privateEndpoint
  #   events:
  #     - http:
  #         path: api/private
  #         method: get
  #         authorizer: auth
  #         cors:
  #           origins:
  #             - '*'
  #           headers:
  #             - Content-Type
  #             - X-Amz-Date
  #             - Authorization
  #             - X-Api-Key
  #             - X-Amz-Security-Token
  getBookingByUserId:
    handler: controllers/Booking.getUserBooking
    events:
      - http:
          path: v1/booking/getBookingByUserId
          method: get
          # authorizer: auth
          integration: lambda
          cors: 
            origins: 
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
          response:
            headers:
              Access-Control-Allow-Origin: "'*'"
  createUserBooking:
    handler: controllers/Booking.createUserBooking
    events:
      - http:
          path: v1/booking/createUserBooking
          method: post
          # authorizer: auth
          integration: lambda
          cors: 
            origins: 
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
          response:
            headers:
              Access-Control-Allow-Origin: "'*'"
  deleteBooking:
    handler: controllers/Booking.deleteBooking
    events:
      - http:
          path: v1/booking/deleteBooking
          method: post
          # authorizer: auth
          integration: lambda
          cors: 
            origins: 
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
  addCatalogue:
    handler: controllers/Catalogue.addCatalogue
    events:
      - http:
          path: v1/catalogue/addCatalogue
          method: post
          # authorizer: auth
          integration: lambda
          cors: 
            origins: 
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
  deleteCatalogue:
    handler: controllers/Catalogue.deleteCatalogue
    events:
      - http:
          path: v1/catalogue/deleteCatalogue
          method: post
          # authorizer: auth
          integration: lambda
          cors: 
            origins: 
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
  findCatalogueByTagId:
    handler: controllers/Catalogue.readCatalogueByTags
    events:
      - http:
          path: v1/catalogue/findCatalogueByTagId
          method: get
          # authorizer: auth
          integration: lambda
          cors: 
            origins: 
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
  readCatalogueByAvailabilityId:
    handler: controllers/Catalogue.readCatalogueByAvailabilityId
    events:
      - http:
          path: v1/catalogue/readCatalogueByAvailabilityId
          method: get
          # authorizer: auth
          integration: lambda
          cors: 
            origins: 
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
  readCatalogue:
    handler: controllers/Catalogue.readCatalogue
    events:
      - http:
          path: v1/catalogue/readCatalogue
          method: get
          # authorizer: auth
          integration: lambda
          cors: 
            origins: 
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
  updateCatalogue:
    handler: controllers/Catalogue.updateCatalogue
    events:
      - http:
          path: v1/catalogue/updateCatalogue
          method: get
          # authorizer: auth
          integration: lambda
          cors: 
            origins: 
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
  createEnrollment:
    handler: controllers/Enrollment.createEnrollment
    events:
      - http:
          path: v1/enrollment/createEnrollment
          method: post
          # authorizer: auth
          integration: lambda
          cors: 
            origins: 
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
  getUserEnrollment:
    handler: controllers/Enrollment.getUserEnrollment
    events:
      - http:
          path: v1/enrollment/getUserEnrollment
          method: get
          # authorizer: auth
          integration: lambda
          cors: 
            origins: 
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
  getEnrollment:
    handler: controllers/Enrollment.getEnrollment
    events:
      - http:
          path: v1/enrollment/getEnrollment
          method: get
          # authorizer: auth
          integration: lambda
          cors: 
            origins: 
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
  deleteEnrollment:
    handler: controllers/Enrollment.deleteEnrollment
    events:
      - http:
          path: v1/enrollment/deleteEnrollment
          method: get
          # authorizer: auth
          integration: lambda
          cors: 
            origins: 
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
  createUser:
    handler: controllers/User.createUser
    events:
      - http:
          path: v1/user/createUser
          method: post
          # authorizer: auth
          integration: lambda
          cors: 
            origins: 
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
  deleteUser:
    handler: controllers/User.deleteUser
    events:
      - http:
          path: v1/user/eleteUser
          method: delete
          # authorizer: auth
          integration: lambda
          cors: 
            origins: 
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
  getUserByName:
    handler: controllers/User.getUserByName
    events:
      - http:
          path: v1/user/getUserByName
          method: get
          # authorizer: auth
          integration: lambda
          cors: 
            origins: 
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
  updateUser:
    handler: controllers/User.updateUser
    events:
      - http:
          path: v1/user/updateUser
          method: get
          # authorizer: auth
          integration: lambda
          cors: 
            origins: 
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
  userLogin:
    handler: controllers/User.userLogin
    events:
      - http:
          path: v1/user/userLogin
          method: get
          # authorizer: auth
          integration: lambda
          cors: 
            origins: 
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
  userLogout:
    handler: controllers/User.userLogout
    events:
      - http:
          path: v1/user/userLogout
          method: get
          # authorizer: auth
          integration: lambda
          cors: 
            origins: 
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token


